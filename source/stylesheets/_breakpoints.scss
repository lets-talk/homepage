/* BREAKPOINTS */
/* ========================================================================== */

// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.
//
// xs -> Portrait phones (Extra small devices)
// sm -> Landscape phones or phablets (Small devices)
// md -> Tablets (Medium devices)
// lg -> Tablet portrait, Desktops (Large devices)
// xl -> Normal Desktop
//
//  # SCSS usage:
//  @media screen #{to(phone)} { /* CSS here */ }
//
//  # Or mixin usage:
//  @include respond(to phone)   { /* CSS here ... */ };
//  @include respond(from phone) { /* CSS here ... */ };
//
//  @include respond(to 320px)   { /* CSS here ... */ };
//  @include respond(from 320px) { /* CSS here ... */ };
//
//  @include respond(from 320px, 2x)                  { /* CSS here ... */ };
//  @include respond(from 320px, portrait)            { /* CSS here ... */ };
//  @include respond(from 320px, to 500px, landscape) { /* CSS here ... */ };
//
//  @include respond(from 320px, to 500px)   { /* CSS here ... */ };
//  @include respond(from 320px, to(medium)) { /* CSS here ... */ };


// Supported names
$breakpoint-names: (
  phone:         xs,
  tablet:        sm,
  laptop:        md,
  desktop:       lg,
  larger:        xl,

  xs:            xs,
  sm:            sm,
  md:            md,
  lg:            lg,
  xl:            xl,
);


@function breakpoint($name) {
  $breakpoint-abbr: map-get($breakpoint-names, $name);
  @return map-get($breakpoints, $breakpoint-abbr);

  // @if map-has-key($breakpoints, $name) {
  //  @return map-get($breakpoints, $breakpoint-abbr);
  // }
  // @else {
  //   @error "$name is not a valid breakpoint, was #{$name}.";
  // }
}

@function from($size) {
  $media: $size + 1; /* but */ @if type-of($size) == string { $media: breakpoint($size) + 1; }
  @return unquote('and (min-width: #{$media})');
}

@function to($size) {
  $media: $size; /* but */ @if type-of($size) == string { $media: breakpoint($size); }
  @return unquote('and (max-width: #{$media})');
}

@function only($size-from,$size-to) {
  @return unquote('and (min-width: #{$size-from + 1}) and (max-width: #{$size-to})');
}

@function orientation($type) {
  @return unquote('and (orientation: #{$type})');
}

@function resolution($size) {
  @return unquote('and (-webkit-min-device-pixel-ratio: #{$size}), (min-resolution: #{96 * $size}dpi)');
}

@mixin respond($given-breakpoints...) {
  $mediatype:  screen;
  $mediaquery: null;

  @if nth($given-breakpoints, 1) == print {
    $mediatype: print;
  }
  @else {
    @each $breakpoint in $given-breakpoints {

      @if type-of($breakpoint) == list {
        $condition: nth($breakpoint, 1);
        $size:      nth($breakpoint, 2);

        @if      $condition == 'from' { $breakpoint: from($size); }
        @else if $condition == 'to'   { $breakpoint: to($size); }
      }
      @else if $breakpoint == portrait  { $breakpoint: orientation(portrait);  }
      @else if $breakpoint == landscape { $breakpoint: orientation(landscape); }
      @else if $breakpoint == retina    { $breakpoint: resolution(2); }

      $mediaquery: append($mediaquery, $breakpoint, space);
    }

    @media #{$mediatype} #{$mediaquery} {
      @content;
    }
  }
}


body {
  content: "screen-xs:0";
  @each $name, $size in $breakpoints {
    @include respond(from $name) {
      content: "screen-#{$name}:#{$size}";
    }
  }
}
